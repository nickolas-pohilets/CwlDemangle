//
//  SwiftSymbol+Dump.swift
//  CwlDemangle
//
//  Created by Nickolas Pokhylets on 08/10/2019.
//  Copyright Â© 2019 Matt Gallagher. All rights reserved.
//

import Foundation

fileprivate extension SwiftSymbol.Kind {
    func dump() -> String {
        switch self {
        case .allocator: return "Allocator"
        case .anonymousContext: return "AnonymousContext"
        case .anonymousDescriptor: return "AnonymousDescriptor"
        case .argumentTuple: return "ArgumentTuple"
        case .associatedConformanceDescriptor: return "AssociatedConformanceDescriptor"
        case .associatedType: return "AssociatedType"
        case .associatedTypeDescriptor: return "AssociatedTypeDescriptor"
        case .associatedTypeGenericParamRef: return "AssociatedTypeGenericParamRef"
        case .associatedTypeMetadataAccessor: return "AssociatedTypeMetadataAccessor"
        case .associatedTypeRef: return "AssociatedTypeRef"
        case .associatedTypeWitnessTableAccessor: return "AssociatedTypeWitnessTableAccessor"
        case .assocTypePath: return "AssocTypePath"
        case .autoClosureType: return "AutoClosureType"
        case .boundGenericClass: return "BoundGenericClass"
        case .boundGenericEnum: return "BoundGenericEnum"
        case .boundGenericFunction: return "BoundGenericFunction"
        case .boundGenericOtherNominalType: return "BoundGenericOtherNominalType"
        case .boundGenericProtocol: return "BoundGenericProtocol"
        case .boundGenericStructure: return "BoundGenericStructure"
        case .boundGenericTypeAlias: return "BoundGenericTypeAlias"
        case .builtinTypeName: return "BuiltinTypeName"
        case .cFunctionPointer: return "CFunctionPointer"
        case .`class`: return "Class"
        case .classMetadataBaseOffset: return "ClassMetadataBaseOffset"
        case .constructor: return "Constructor"
        case .coroutineContinuationPrototype: return "CoroutineContinuationPrototype"
        case .curryThunk: return "CurryThunk"
        case .deallocator: return "Deallocator"
        case .declContext: return "DeclContext"
        case .defaultArgumentInitializer: return "DefaultArgumentInitializer"
        case .defaultAssociatedConformanceAccessor: return "DefaultAssociatedConformanceAccessor"
        case .defaultAssociatedTypeMetadataAccessor: return "DefaultAssociatedTypeMetadataAccessor"
        case .dependentAssociatedTypeRef: return "DependentAssociatedTypeRef"
        case .dependentGenericConformanceRequirement: return "DependentGenericConformanceRequirement"
        case .dependentGenericLayoutRequirement: return "DependentGenericLayoutRequirement"
        case .dependentGenericParamCount: return "DependentGenericParamCount"
        case .dependentGenericParamType: return "DependentGenericParamType"
        case .dependentGenericSameTypeRequirement: return "DependentGenericSameTypeRequirement"
        case .dependentGenericSignature: return "DependentGenericSignature"
        case .dependentGenericType: return "DependentGenericType"
        case .dependentMemberType: return "DependentMemberType"
        case .dependentPseudogenericSignature: return "DependentPseudogenericSignature"
        case .destructor: return "Destructor"
        case .didSet: return "DidSet"
        case .directMethodReferenceAttribute: return "DirectMethodReferenceAttribute"
        case .directness: return "Directness"
        case .dispatchThunk: return "DispatchThunk"
        case .dynamicAttribute: return "DynamicAttribute"
        case .dynamicSelf: return "DynamicSelf"
        case .emptyList: return "EmptyList"
        case .`enum`: return "Enum"
        case .enumCase: return "EnumCase"
        case .errorType: return "ErrorType"
        case .escapingAutoClosureType: return "EscapingAutoClosureType"
        case .existentialMetatype: return "ExistentialMetatype"
        case .explicitClosure: return "ExplicitClosure"
        case .`extension`: return "Extension"
        case .extensionDescriptor: return "ExtensionDescriptor"
        case .fieldOffset: return "FieldOffset"
        case .firstElementMarker: return "FirstElementMarker"
        case .fullTypeMetadata: return "FullTypeMetadata"
        case .function: return "Function"
        case .functionSignatureSpecialization: return "FunctionSignatureSpecialization"
        case .functionSignatureSpecializationParam: return "FunctionSignatureSpecializationParam"
        case .functionSignatureSpecializationParamKind: return "FunctionSignatureSpecializationParamKind"
        case .functionSignatureSpecializationParamPayload: return "FunctionSignatureSpecializationParamPayload"
        case .functionType: return "FunctionType"
        case .genericPartialSpecialization: return "GenericPartialSpecialization"
        case .genericPartialSpecializationNotReAbstracted: return "GenericPartialSpecializationNotReAbstracted"
        case .genericProtocolWitnessTable: return "GenericProtocolWitnessTable"
        case .genericProtocolWitnessTableInstantiationFunction: return "GenericProtocolWitnessTableInstantiationFunction"
        case .genericSpecialization: return "GenericSpecialization"
        case .genericSpecializationNotReAbstracted: return "GenericSpecializationNotReAbstracted"
        case .genericSpecializationParam: return "GenericSpecializationParam"
        case .genericTypeMetadataPattern: return "GenericTypeMetadataPattern"
        case .genericTypeParamDecl: return "GenericTypeParamDecl"
        case .getter: return "Getter"
        case .global: return "Global"
        case .globalGetter: return "GlobalGetter"
        case .identifier: return "Identifier"
        case .implConvention: return "ImplConvention"
        case .implErrorResult: return "ImplErrorResult"
        case .implEscaping: return "ImplEscaping"
        case .implFunctionAttribute: return "ImplFunctionAttribute"
        case .implFunctionType: return "ImplFunctionType"
        case .implicitClosure: return "ImplicitClosure"
        case .implParameter: return "ImplParameter"
        case .implResult: return "ImplResult"
        case .index: return "Index"
        case .infixOperator: return "InfixOperator"
        case .initializer: return "Initializer"
        case .inOut: return "InOut"
        case .iVarDestroyer: return "IVarDestroyer"
        case .iVarInitializer: return "IVarInitializer"
        case .keyPathEqualsThunkHelper: return "KeyPathEqualsThunkHelper"
        case .keyPathGetterThunkHelper: return "KeyPathGetterThunkHelper"
        case .keyPathHashThunkHelper: return "KeyPathHashThunkHelper"
        case .keyPathSetterThunkHelper: return "KeyPathSetterThunkHelper"
        case .labelList: return "LabelList"
        case .lazyProtocolWitnessTableAccessor: return "LazyProtocolWitnessTableAccessor"
        case .lazyProtocolWitnessTableCacheVariable: return "LazyProtocolWitnessTableCacheVariable"
        case .localDeclName: return "LocalDeclName"
        case .materializeForSet: return "MaterializeForSet"
        case .mergedFunction: return "MergedFunction"
        case .metaclass: return "Metaclass"
        case .metatype: return "Metatype"
        case .metatypeRepresentation: return "MetatypeRepresentation"
        case .methodDescriptor: return "MethodDescriptor"
        case .methodLookupFunction: return "MethodLookupFunction"
        case .modifyAccessor: return "ModifyAccessor"
        case .module: return "Module"
        case .moduleDescriptor: return "ModuleDescriptor"
        case .nativeOwningAddressor: return "NativeOwningAddressor"
        case .nativeOwningMutableAddressor: return "NativeOwningMutableAddressor"
        case .nativePinningAddressor: return "NativePinningAddressor"
        case .nativePinningMutableAddressor: return "NativePinningMutableAddressor"
        case .noEscapeFunctionType: return "NoEscapeFunctionType"
        case .nominalTypeDescriptor: return "NominalTypeDescriptor"
        case .nonObjCAttribute: return "NonObjCAttribute"
        case .number: return "Number"
        case .objCAttribute: return "ObjCAttribute"
        case .objCBlock: return "ObjCBlock"
        case .otherNominalType: return "OtherNominalType"
        case .outlinedAssignWithCopy: return "OutlinedAssignWithCopy"
        case .outlinedAssignWithTake: return "OutlinedAssignWithTake"
        case .outlinedBridgedMethod: return "OutlinedBridgedMethod"
        case .outlinedConsume: return "OutlinedConsume"
        case .outlinedCopy: return "OutlinedCopy"
        case .outlinedDestroy: return "OutlinedDestroy"
        case .outlinedInitializeWithCopy: return "OutlinedInitializeWithCopy"
        case .outlinedInitializeWithTake: return "OutlinedInitializeWithTake"
        case .outlinedRelease: return "OutlinedRelease"
        case .outlinedRetain: return "OutlinedRetain"
        case .outlinedVariable: return "OutlinedVariable"
        case .owned: return "Owned"
        case .owningAddressor: return "OwningAddressor"
        case .owningMutableAddressor: return "OwningMutableAddressor"
        case .partialApplyForwarder: return "PartialApplyForwarder"
        case .partialApplyObjCForwarder: return "PartialApplyObjCForwarder"
        case .postfixOperator: return "PostfixOperator"
        case .prefixOperator: return "PrefixOperator"
        case .privateDeclName: return "PrivateDeclName"
        case .propertyDescriptor: return "PropertyDescriptor"
        case .`protocol`: return "Protocol"
        case .protocolConformance: return "ProtocolConformance"
        case .protocolConformanceDescriptor: return "ProtocolConformanceDescriptor"
        case .protocolDescriptor: return "ProtocolDescriptor"
        case .protocolList: return "ProtocolList"
        case .protocolListWithAnyObject: return "ProtocolListWithAnyObject"
        case .protocolListWithClass: return "ProtocolListWithClass"
        case .protocolRequirementsBaseDescriptor: return "ProtocolRequirementsBaseDescriptor"
        case .protocolWitness: return "ProtocolWitness"
        case .protocolWitnessTable: return "ProtocolWitnessTable"
        case .protocolWitnessTableAccessor: return "ProtocolWitnessTableAccessor"
        case .protocolWitnessTablePattern: return "ProtocolWitnessTablePattern"
        case .reabstractionThunk: return "ReabstractionThunk"
        case .reabstractionThunkHelper: return "ReabstractionThunkHelper"
        case .readAccessor: return "ReadAccessor"
        case .reflectionMetadataAssocTypeDescriptor: return "ReflectionMetadataAssocTypeDescriptor"
        case .reflectionMetadataBuiltinDescriptor: return "ReflectionMetadataBuiltinDescriptor"
        case .reflectionMetadataFieldDescriptor: return "ReflectionMetadataFieldDescriptor"
        case .reflectionMetadataSuperclassDescriptor: return "ReflectionMetadataSuperclassDescriptor"
        case .relatedEntityDeclName: return "RelatedEntityDeclName"
        case .resilientProtocolWitnessTable: return "ResilientProtocolWitnessTable"
        case .retroactiveConformance: return "RetroactiveConformance"
        case .returnType: return "ReturnType"
        case .setter: return "Setter"
        case .shared: return "Shared"
        case .silBoxImmutableField: return "SilBoxImmutableField"
        case .silBoxLayout: return "SilBoxLayout"
        case .silBoxMutableField: return "SilBoxMutableField"
        case .silBoxType: return "SilBoxType"
        case .silBoxTypeWithLayout: return "SilBoxTypeWithLayout"
        case .isSerialized: return "IsSerialized"
        case .specializationPassID: return "SpecializationPassID"
        case .`static`: return "Static"
        case .structure: return "Structure"
        case .`subscript`: return "Subscript"
        case .suffix: return "Suffix"
        case .symbolicReference: return "SymbolicReference"
        case .thinFunctionType: return "ThinFunctionType"
        case .throwsAnnotation: return "ThrowsAnnotation"
        case .tuple: return "Tuple"
        case .tupleElement: return "TupleElement"
        case .tupleElementName: return "TupleElementName"
        case .type: return "Type"
        case .typeAlias: return "TypeAlias"
        case .typeList: return "TypeList"
        case .typeMangling: return "TypeMangling"
        case .typeMetadata: return "TypeMetadata"
        case .typeMetadataAccessFunction: return "TypeMetadataAccessFunction"
        case .typeMetadataCompletionFunction: return "TypeMetadataCompletionFunction"
        case .typeMetadataInstantiationCache: return "TypeMetadataInstantiationCache"
        case .typeMetadataInstantiationFunction: return "TypeMetadataInstantiationFunction"
        case .typeMetadataLazyCache: return "TypeMetadataLazyCache"
        case .typeMetadataSingletonInitializationCache: return "TypeMetadataSingletonInitializationCache"
        case .uncurriedFunctionType: return "UncurriedFunctionType"
        case .unmanaged: return "Unmanaged"
        case .unowned: return "Unowned"
        case .unresolvedSymbolicReference: return "UnresolvedSymbolicReference"
        case .unsafeAddressor: return "UnsafeAddressor"
        case .unsafeMutableAddressor: return "UnsafeMutableAddressor"
        case .valueWitness: return "ValueWitness"
        case .valueWitnessTable: return "ValueWitnessTable"
        case .variable: return "Variable"
        case .variadicMarker: return "VariadicMarker"
        case .vTableAttribute: return "VTableAttribute"
        case .vTableThunk: return "VTableThunk"
        case .weak: return "Weak"
        case .willSet: return "WillSet"
        }
    }
}

public extension SwiftSymbol {
    private func dump(res: inout String, depth: Int) {
        for _ in 0..<depth {
            res += "  "
        }
        res += "kind="
        res += self.kind.dump()
        switch self.contents {
        case .none:
            break
        case let .index(x):
            res += ", index=\(x)"
        case let .name(n):
            res += ", text=\"\(n)\""
        }
        res += "\n"

        for child in self.children {
            child.dump(res: &res, depth: depth + 1)
        }
    }

    /// Dumps tree of nodes in the same format as swift::Demangle::Node::dump() does
    /// Can be used to diff parsed trees against reference implementation
    func dump() -> String {
        var res = ""
        self.dump(res: &res, depth: 0)
        return res
    }
}
